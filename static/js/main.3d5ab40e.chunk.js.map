{"version":3,"sources":["components/AdminPage.tsx","components/InputPage.tsx","components/LandingPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AdminPage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","console","log","clearLocalStorage","bind","assertThisInitialized","localStorage","clear","react_default","a","createElement","card","title","bordered","style","width","es_button","onClick","Component","Option","es_select","InputPage","_Component","createSignedTransaction","inherits","createClass","key","value","form","validateFields","e","_this2","preventDefault","err","values","bnClient","fieldsError","_this$props$form","getFieldDecorator","getFieldsError","getFieldError","isFieldTouched","usernameError","feeError","Fragment","es_form","onSubmit","Item","validateStatus","help","rules","required","message","input","prefix","icon","type","color","placeholder","label","initialValue","htmlType","disabled","keys","some","field","WrappedInputPage","create","name","LandingPage","className","HashRouter","Route","exact","path","render","routerProps","components_InputPage","assign","match","components_AdminPage","App","web3","state","initBlocknative","process","options","dappId","networkId","transactionHandlers","event","transaction","blocknativeSdk","blocknative","setState","_context","t0","msg","BN","utils","eth","getAccounts","error","accounts","window","ethereum","setWeb3","Web3","enable","sendTransaction","currentProvider","components_LandingPage","Boolean","location","hostname","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d5ab40e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Card } from 'antd';\nimport * as web3 from 'web3';\n\ninterface IAdminPageProps {\n  web3: any;\n}\n\nclass AdminPage extends Component<IAdminPageProps> {\n  constructor(props: IAdminPageProps) {\n    super(props);\n    console.log('inputPage constructor ran')\n    this.clearLocalStorage = this.clearLocalStorage.bind(this);\n  }\n\n\n  clearLocalStorage() {\n    localStorage.clear()\n    console.log('localStorage cleared');\n  }\n\n  render() {\n    return (\n      <div>\n        <Card title=\"Admin Page\" bordered={false} style={{ width: '100%' }}>\n          <p>Admin functions</p>\n          <Button onClick={this.clearLocalStorage}>Clear local storage</Button>\n\n        </Card>\n      </div>\n    );\n  }\n}\nexport default AdminPage;\n","import React, { Component } from 'react';\nimport { Card, Form, Icon, Input, Button, Select } from 'antd';\nconst Option = Select.Option\nimport { FormComponentProps } from 'antd/lib/form';\n\ninterface IInputPageProps extends FormComponentProps {\n  match: any;\n  web3: any;\n  bnClient: any;\n}\ninterface IInputState {\n  bnClient: any\n}\ninterface IFormValues {\n  vaultAddress: string\n  fee: string\n  token: string\n}\n\nconst formItemLayout = {\n  labelCol: {\n    xs: { span: 24 },\n    sm: { span: 8 },\n  },\n  wrapperCol: {\n    xs: { span: 24 },\n    sm: { span: 16 },\n  },\n};\n\nfunction hasErrors(fieldsError: any) {\n  return Object.keys(fieldsError).some((field: any) => fieldsError[field]);\n}\n\nexport class InputPage extends Component<IInputPageProps, IInputState> {\n  constructor(props: IInputPageProps) {\n    super(props)\n    this.createSignedTransaction = this.createSignedTransaction.bind(this)\n  }\n  componentDidMount() {\n    // To disable submit button at the beginning.\n    this.props.form.validateFields();\n  }\n\n  createSignedTransaction(e: any) {\n    e.preventDefault();\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        console.log('Received values of form: ', values);\n        console.log('this.props.bnClient: ', this.props.bnClient)\n      }\n    });\n  }\n  render() {\n    const { getFieldDecorator, getFieldsError, getFieldError, isFieldTouched } = this.props.form;\n    // Only show error after a field is touched.\n    const usernameError = isFieldTouched('vaultAddress') && getFieldError('vaultAddress');\n    const feeError = isFieldTouched('fee') && getFieldError('fee');\n    return (\n      <>\n        <h2>InputPage</h2>\n        <Card title=\"Create new watcher\" bordered={false} style={{ width: '80%' }}>\n          <p>create a new watcher</p>\n          <Form onSubmit={this.createSignedTransaction}>\n            <Form.Item validateStatus={usernameError ? 'error' : ''} help={usernameError || ''}>\n              {getFieldDecorator('vaultAddress', {\n                rules: [{ required: true, message: 'Please enter your vault address!' }],\n              })(\n                <Input\n                  prefix={<Icon type=\"info-circle\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"vault wallet address\"\n                />,\n              )}\n            </Form.Item>\n            <Form.Item validateStatus={feeError ? 'error' : ''} help={feeError || ''}>\n              {getFieldDecorator('fee', {\n                rules: [{ required: true, message: 'Please enter your vault address!' }],\n              })(\n                <Input\n                  prefix={<Icon type=\"upload\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                  placeholder=\"Enter the fee you're willing to pay.\"\n                />,\n              )}\n            </Form.Item>\n            <Form.Item label=\"Token\">\n              {getFieldDecorator('token', {\n                initialValue: 'ETH',\n                rules: [{ required: true, message: 'Please select a token!' }],\n              })(\n                <Select\n                  placeholder=\"Select a token\"\n                >\n                  <Option value=\"ETH\">ETH</Option>\n                  <Option value=\"TRX\">TRX</Option>\n                  <Option value=\"WETH\">WETH</Option>\n                </Select>\n              )}\n            </Form.Item>\n            <Form.Item>\n              <Button type=\"primary\" htmlType=\"submit\" disabled={hasErrors(getFieldsError())}>\n                Sign\n              </Button>\n            </Form.Item>\n          </Form>\n\n        </Card>\n\n        <Card title=\"Add to whitelist\" bordered={false} style={{ width: '80%' }}>\n          <p>add to whitelist</p>\n          <p>coming soon...</p>\n        </Card>\n\n      </>\n    );\n  }\n}\nconst WrappedInputPage = Form.create({ name: 'input_page' })(InputPage)\nexport default WrappedInputPage;\n","import React, { Component } from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\n\nimport AdminPage from './AdminPage';\nimport InputPage from './InputPage';\n\n\ninterface ILandingPageProps {\n  web3: any;\n  bnClient: any;\n}\nclass LandingPage extends Component<ILandingPageProps> {\n  constructor(props: ILandingPageProps) {\n    super(props);\n  }\n  render() {\n    return (\n      <div className=\"landing-page\">\n        <Router>\n          <>\n            <Route exact path=\"/\"\n              render={routerProps => (\n                <InputPage\n                  match={routerProps.match}\n                  {...this.props}\n                />\n              )}\n            />\n            <Route\n              path=\"/admin\"\n              render={routerProps => (\n                <AdminPage\n                  {...this.props}\n                />\n              )}\n            />\n          </>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import React, { Component } from 'react';\nimport './App.less';\n\nimport { Button } from 'antd';\nimport blocknativeSdk from 'bnc-sdk';\nimport * as Web3 from 'web3';\n\nimport LandingPage from './components/LandingPage';\n\ninterface IAppState {\n  web3?: any;\n  bnClient?: any\n}\n\nclass App extends Component<{}, IAppState> {\n  // Web3\n  web3?: any;\n\n  constructor(props: any) {\n    super(props);\n    this.state = {}\n    this.initBlocknative = this.initBlocknative.bind(this);\n\n  }\n\n  componentDidMount() {\n    this.initBlocknative()\n  }\n\n  async initBlocknative() {\n    const bnKey = process.env.REACT_APP_BLOCKNATIVE_API_KEY || ''\n    const main = 1;\n    const ropsten = 3;\n    const rinkeby = 4;\n    const options = {\n      dappId: bnKey,\n      networkId: ropsten,\n      transactionHandlers: [(event: any) => console.log(event.transaction)],\n    }\n    try {\n      // onboard visitors\n\n      // initialize and connect to the api\n      const blocknative = await blocknativeSdk(options)\n      console.log('blocknative: ', blocknative)\n      this.setState(() => ({\n        bnClient: blocknative\n      }))\n    } catch (error) {\n      // user exited onboarding before completion\n      console.log(error.msg);\n    }\n  }\n\n  async setWeb3(web3: any) {\n    if (web3) {\n      this.web3 = web3;\n      console.log('web3 available');\n      // @ts-ignore\n      this.BN = web3.utils.BN;\n      web3.eth.getAccounts((error: any, accounts: any) => {\n        console.log(accounts);\n      });\n\n    }\n  }\n\n  async connectToMetamask() {\n    // Modern dapp browsers...\n    // @ts-ignore\n    if (window.ethereum) {\n      // @ts-ignore\n      this.setWeb3(new Web3(ethereum));\n      try {\n        // Request account access if needed\n        // @ts-ignore\n        await ethereum.enable();\n        // Acccounts now exposed\n        // @ts-ignore\n        web3.eth.sendTransaction({\n          /* ... */\n        });\n      } catch (error) {\n        // User denied account access...\n      }\n    }\n    // Legacy dapp browsers...\n    // @ts-ignore\n    else if (window.web3) {\n      // @ts-ignore\n      this.setWeb3(new Web3(web3.currentProvider));\n      // Acccounts always exposed\n      // @ts-ignore\n      web3.eth.sendTransaction({\n        /* ... */\n      });\n    }\n    // Non-dapp browsers...\n    else {\n      console.log(\n        'Non-Ethereum browser detected. You should consider trying MetaMask!'\n      );\n    }\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"logo\" />\n          <LandingPage\n            web3={this.web3}\n            bnClient={this.state.bnClient}\n          />\n\n          {/* for debugging  */}\n          {/* <Button type=\"primary\" onClick={this.initBlocknative}>\n            Login with Blocknative\n          </Button> */}\n\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config: any) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: any, config: any) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: any, config: any) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(<App />, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}